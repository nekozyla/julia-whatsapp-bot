// commands/sticker.js
const { downloadMediaMessage, getContentType } = require('@whiskeysockets/baileys');
const sharp = require('sharp');
const path = require('path');
const fsp = require('fs').promises;
const { exec } = require('child_process');
const crypto = require('crypto');

/**
 * Converte um v√≠deo para um sticker WebP animado, tentando m√∫ltiplos
 * n√≠veis de compress√£o para garantir que o tamanho final seja menor que 1MB.
 * @param {string} inputPath - Caminho para o v√≠deo de entrada.
 * @param {string} outputPath - Caminho para salvar o sticker .webp de sa√≠da.
 * @returns {Promise<void>}
 * @throws {Error}
 */
async function optimizeAnimatedSticker(inputPath, outputPath) {
    const MAX_SIZE_BYTES = 1024 * 1024; // 1 MB
    const optimizationSteps = [
        { quality: 75, fps: 20 },
        { quality: 65, fps: 16 },
        { quality: 50, fps: 14 },
        { quality: 40, fps: 12 },
        { quality: 30, fps: 10 }
    ];

    console.log('[Sticker Optimizer] Iniciando processo de otimiza√ß√£o...');
    for (let i = 0; i < optimizationSteps.length; i++) {
        const params = optimizationSteps[i];
        console.log(`[Sticker Optimizer] Tentativa ${i + 1}/${optimizationSteps.length}: Qualidade=${params.quality}, FPS=${params.fps}`);
        
        const ffmpegCommand = `ffmpeg -i "${inputPath}" -y -t 7 ` +
            `-vf "scale=512:512:force_original_aspect_ratio=decrease,fps=${params.fps},pad=512:512:-1:-1:color=black@0" ` +
            `-c:v libwebp -lossless 0 -q:v ${params.quality} -loop 0 -preset default -an "${outputPath}"`;

        await new Promise((resolve, reject) => {
            exec(ffmpegCommand, (error, stdout, stderr) => {
                if (error) {
                    console.error('[FFmpeg Error]:', stderr);
                    return reject(new Error('Falha na execu√ß√£o do FFmpeg.'));
                }
                resolve(stdout);
            });
        });

        const stats = await fsp.stat(outputPath);
        const fileSizeMb = stats.size / MAX_SIZE_BYTES;
        console.log(`[Sticker Optimizer] Tamanho gerado: ${fileSizeMb.toFixed(3)} MB`);

        if (stats.size < MAX_SIZE_BYTES) {
            console.log(`[Sticker Optimizer] Sucesso! O sticker est√° dentro do limite de tamanho.`);
            return;
        }
    }
    throw new Error(`N√£o foi poss√≠vel otimizar o sticker para menos de 1 MB.`);
}

/**
 * L√≥gica principal que baixa, processa (com otimiza√ß√£o) e envia uma figurinha.
 * @param {object} sock - A inst√¢ncia do socket Baileys.
 * @param {object} msgWithMedia - O objeto da mensagem que cont√©m a imagem/v√≠deo.
 * @param {object} originalMsgToQuote - A mensagem original para responder.
 */
async function processAndSendSticker(sock, msgWithMedia, originalMsgToQuote) {
    const sender = originalMsgToQuote.key.remoteJid;
    const messageType = getContentType(msgWithMedia.message);
    const isAnimated = (messageType === 'videoMessage');
    
    console.log(`[Sticker Processing] Iniciando cria√ß√£o de sticker para ${sender} (${isAnimated ? 'Animado' : 'Est√°tico'}).`);
    
    const tempDir = path.join(__dirname, '..', 'temp_stickers');
    await fsp.mkdir(tempDir, { recursive: true });
    const randomId = crypto.randomBytes(8).toString('hex');
    const inputPath = path.join(tempDir, `${randomId}.mp4`);
    const outputPath = path.join(tempDir, `${randomId}.webp`);

    try {
        await sock.sendPresenceUpdate('composing', sender);
        const buffer = await downloadMediaMessage(msgWithMedia, 'buffer', {}, { logger: undefined });
        let stickerBuffer;

        if (isAnimated) {
            await fsp.writeFile(inputPath, buffer);
            await optimizeAnimatedSticker(inputPath, outputPath); // <--- SUA L√ìGICA DE OTIMIZA√á√ÉO
            stickerBuffer = await fsp.readFile(outputPath);
        } else {
            stickerBuffer = await sharp(buffer)
                .resize(512, 512, { fit: 'contain', background: { r: 0, g: 0, b: 0, alpha: 0 } })
                .webp({ quality: 90 })
                .toBuffer();
        }

        if (!stickerBuffer || stickerBuffer.length === 0) {
            throw new Error('Ocorreu um erro ao processar a m√≠dia e o resultado foi um arquivo vazio.');
        }
        
        await sock.sendMessage(sender, { sticker: stickerBuffer }, { quoted: originalMsgToQuote });

    } catch (err) {
        console.error('[Erro ao processar figurinha]:', err);
        await sock.sendMessage(sender, { text: `Tive um probleminha pra fazer essa figurinha üòï.\n\n_${err.message}_` }, { quoted: originalMsgToQuote });
    } finally {
        await fsp.unlink(inputPath).catch(() => {});
        await fsp.unlink(outputPath).catch(() => {});
    }
}

/**
 * Handler para o comando !sticker.
 * Ele apenas identifica qual m√≠dia deve ser processada e chama a fun√ß√£o principal.
 */
async function handleStickerCreationCommand(sock, msg, msgDetails) {
    const { sender, commandText, messageType } = msgDetails;
    const quotedMsgInfo = msg.message.extendedTextMessage?.contextInfo?.quotedMessage;
    
    let mediaToProcess = null;

    if ((messageType === 'imageMessage' || messageType === 'videoMessage') && commandText?.toLowerCase().includes('!sticker')) {
        mediaToProcess = msg;
    } else if (quotedMsgInfo && commandText?.toLowerCase().includes('!sticker')) {
        const quotedMsgType = getContentType(quotedMsgInfo);
        if (quotedMsgType === 'imageMessage' || quotedMsgType === 'videoMessage') {
            mediaToProcess = {
                key: msg.message.extendedTextMessage.contextInfo.quotedMessage.key,
                message: quotedMsgInfo
            };
        }
    }

    // Se nenhuma m√≠dia for encontrada para o comando !sticker, envia a mensagem de ajuda
    if (!mediaToProcess && commandText?.toLowerCase().includes('!sticker')) {
        await sock.sendMessage(sender, { text: 'Para usar o `!sticker`, envie o comando na legenda de uma imagem/gif ou responda a um com `!sticker`.' }, { quoted: msg });
        return true;
    }
    
    // Se encontrou m√≠dia, chama a fun√ß√£o de processamento
    if (mediaToProcess) {
        await processAndSendSticker(sock, mediaToProcess, msg);
    }
    
    return true; 
}

// Exporta as duas fun√ß√µes para que o main.js e o pr√≥prio comando possam us√°-las
module.exports = handleStickerCreationCommand;
module.exports.processAndSendSticker = processAndSendSticker;
